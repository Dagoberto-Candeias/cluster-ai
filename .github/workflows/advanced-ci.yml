name: Advanced CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  release:
    types: [published]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run linting (flake8)
        run: |
          source venv/bin/activate
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run code formatting check (black)
        run: |
          source venv/bin/activate
          black --check --diff .

      - name: Run import sorting check (isort)
        run: |
          source venv/bin/activate
          isort --check-only --diff .

      - name: Run type checking (mypy)
        run: |
          source venv/bin/activate
          mypy . --ignore-missing-imports || true

      - name: Run security checks (bandit)
        run: |
          source venv/bin/activate
          bandit -r . -f json -o security-report.json || true

      - name: Run dependency vulnerability check (safety)
        run: |
          source venv/bin/activate
          safety check || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            security-report.json
            reports/

  test-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11, 3.13]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run unit tests
        run: |
          source venv/bin/activate
          pytest tests/unit/ -v --cov=. --cov-report=xml

      - name: Run integration tests
        run: |
          source venv/bin/activate
          bash scripts/validation/integration_test.sh

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-python-${{ matrix.python-version }}
          path: coverage.xml

  build-and-package:
    runs-on: ubuntu-latest
    needs: [quality-checks, test-matrix]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install build dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          source venv/bin/activate
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-package]
    if: github.event_name == 'release'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install twine
          twine upload dist/*

  docker-build:
    runs-on: ubuntu-latest
    needs: [quality-checks, test-matrix]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/cluster-ai:latest
            ${{ secrets.DOCKER_USERNAME }}/cluster-ai:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    runs-on: ubuntu-latest
    needs: [quality-checks, test-matrix, build-and-package]
    if: always()

    steps:
      - name: Send notification
        run: |
          echo "Pipeline completed with status: ${{ job.status }}"
          # Add notification logic here (Slack, Discord, etc.)
