[pytest]
# Opções de linha de comando padrão para todas as execuções do pytest.
# -v: modo verboso, -q: modo quieto (sobrescreve -v se ambos forem usados)
# --tb=short: traceback curto para erros
# --cov=.: diretório para análise de cobertura (raiz do projeto)
# --cov-append: adiciona dados de cobertura a execuções anteriores, em vez de sobrescrever.
addopts = -v --tb=short --cov=. --cov-append --junitxml=tests/reports/junit-report.xml

# Diretórios que o pytest deve procurar por testes.
testpaths =
    tests

# Diretórios a serem ignorados durante a coleta de testes.
# Usa padrões de nome de arquivo do shell.
norecursedirs = .git .* build dist venv* tests/legacy

# Registrar marcadores customizados para evitar avisos (warnings).
markers =
    unit: Testes unitários
    integration: Testes de integração
    e2e: Testes end-to-end
    performance: Testes de performance
    security: Testes de segurança
    slow: Testes que demoram mais
    smoke: Testes de fumaça para saúde básica da aplicação
    skip_ci: Testes para pular em ambientes de CI
    monitoring: Testes relacionados ao monitoramento do sistema
    alerts: Testes relacionados ao sistema de alertas
    recovery: Testes relacionados à recuperação de falhas
    timeout: Testes com configuração de timeout específica
    bash: Testes relacionados a scripts bash
    installation: Testes de instalação
    deployment: Testes de deployment
    model: Testes relacionados a modelos
    api: Testes de API
    ui: Testes de interface de usuário
    database: Testes de banco de dados
    network: Testes de rede
    file: Testes de operações de arquivo
    config: Testes de configuração
    auth: Testes de autenticação
    session: Testes de sessão
    access: Testes de controle de acesso
    input_validation: Testes de validação de entrada
    command_injection: Testes de proteção contra injeção de comandos
    data_validation: Testes de validação de dados
    cluster: Testes relacionados ao cluster
    dask: Testes relacionados ao Dask
    rstudio: Testes relacionados ao RStudio
    demo: Testes de demonstração
    benchmark: Testes de benchmark
    caching: Testes de cache
    memory: Testes de memória (desabilita coverage para reduzir uso de memória)
    io: Testes de I/O
    concurrent: Testes de operações concorrentes
    scalability: Testes de escalabilidade
    fault_tolerance: Testes de tolerância a falhas
    data_transfer: Testes de transferência de dados
    disk: Testes de disco
    webui: Testes de interface web
    auto_discover: Testes de descoberta automática
    cache_performance: Testes de performance de cache
    asyncio: Testes assíncronos usando pytest-asyncio

# Configuração do pytest-asyncio para o modo 'auto'.
asyncio_mode = auto

# Ignorar avisos específicos (opcional, mas útil).
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    ignore::ResourceWarning
    ignore::pytest.PytestUnraisableExceptionWarning
    ignore::pytest.PytestUnknownMarkWarning
    error::pytest.PytestAssertRewriteWarning

# Configuração específica para testes de memória (sem coverage para reduzir uso de memória)
[memory:memory]
addopts = -v --tb=short --junitxml=tests/reports/junit-memory-report.xml
