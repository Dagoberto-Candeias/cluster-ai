#!/bin/bash

# Cluster AI - Comprehensive Diagnostic Report
# Generated: $(date)

set -e

echo "üîç CLUSTER AI - RELAT√ìRIO DIAGN√ìSTICO ABRANGENTE"
echo "=================================================="
echo "Data: $(date)"
echo "Diret√≥rio: $(pwd)"
echo ""

# 1. SISTEMA OPERACIONAL E RECURSOS
echo "1. üìä SISTEMA OPERACIONAL E RECURSOS"
echo "-------------------------------------"
echo "Sistema: $(uname -a)"
echo "Distribui√ß√£o: $(lsb_release -d 2>/dev/null || cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
echo "CPU: $(nproc) cores - $(cat /proc/cpuinfo | grep "model name" | head -1 | cut -d: -f2 | sed 's/^ *//')"
echo "Mem√≥ria Total: $(free -h | grep Mem | awk '{print $2}')"
echo "Mem√≥ria Dispon√≠vel: $(free -h | grep Mem | awk '{print $7}')"
echo "Disco: $(df -h / | tail -1 | awk '{print $4 " dispon√≠vel de " $2}')"
echo ""

# 2. AMBIENTE PYTHON
echo "2. üêç AMBIENTE PYTHON"
echo "---------------------"
if [ -d "cluster-ai-env" ]; then
    echo "‚úÖ Ambiente virtual encontrado: cluster-ai-env"
    source cluster-ai-env/bin/activate
    echo "Python: $(python --version)"
    echo "Pip: $(pip --version)"
    echo "Local do ambiente: $(which python)"
else
    echo "‚ùå Ambiente virtual N√ÉO encontrado"
fi
echo ""

# 3. DEPEND√äNCIAS PYTHON
echo "3. üì¶ DEPEND√äNCIAS PYTHON"
echo "-------------------------"
echo "Verificando depend√™ncias cr√≠ticas..."
python -c "
try:
    import flask, fastapi, dask, torch, ollama
    print('‚úÖ Depend√™ncias principais OK')
except ImportError as e:
    print(f'‚ùå Falta depend√™ncia: {e}')
"
echo ""

# 4. ESTRUTURA DE DIRET√ìRIOS
echo "4. üìÅ ESTRUTURA DE DIRET√ìRIOS"
echo "-----------------------------"
echo "Scripts encontrados: $(find scripts/ -name "*.sh" -type f 2>/dev/null | wc -l)"
echo "Arquivos Python: $(find . -name "*.py" -type f -not -path "./node_modules/*" -not -path "./cluster-ai-env/*" -not -path "./__pycache__/*" 2>/dev/null | wc -l)"
echo "Diret√≥rios principais:"
ls -la | grep "^d" | awk '{print "  " $9}' | head -10
echo ""

# 5. PERMISS√ïES DE SCRIPTS
echo "5. üîê PERMISS√ïES DE SCRIPTS"
echo "---------------------------"
echo "Scripts sem permiss√£o de execu√ß√£o:"
find scripts/ -name "*.sh" -type f ! -executable 2>/dev/null | head -5 || echo "  Nenhum encontrado"
echo "Scripts com permiss√£o de execu√ß√£o: $(find scripts/ -name "*.sh" -type f -executable 2>/dev/null | wc -l)"
echo ""

# 6. SINTAXE DE SCRIPTS
echo "6. üìù SINTAXE DE SCRIPTS"
echo "-----------------------"
echo "Verificando sintaxe dos scripts..."
bash_syntax_errors=$(find scripts/ -name "*.sh" -type f -executable -exec bash -n {} \; 2>&1 | wc -l)
if [ "$bash_syntax_errors" -eq 0 ]; then
    echo "‚úÖ Nenhum erro de sintaxe encontrado em scripts Bash"
else
    echo "‚ùå $bash_syntax_errors erros de sintaxe encontrados"
fi

echo "Verificando sintaxe Python..."
python_syntax_errors=$(python -m py_compile $(find . -name "*.py" -type f -not -path "./node_modules/*" -not -path "./cluster-ai-env/*" -not -path "./__pycache__/*" 2>/dev/null) 2>&1 | wc -l)
if [ "$python_syntax_errors" -eq 0 ]; then
    echo "‚úÖ Nenhum erro de sintaxe encontrado em arquivos Python"
else
    echo "‚ùå $python_syntax_errors erros de sintaxe encontrados"
fi
echo ""

# 7. CONFIGURA√á√ïES
echo "7. ‚öôÔ∏è CONFIGURA√á√ïES"
echo "-------------------"
echo "Arquivos de configura√ß√£o encontrados:"
find . -name "*.yaml" -o -name "*.yml" -o -name "*.conf" -o -name "*.ini" -o -name "*.env*" | grep -v cluster-ai-env | head -5
echo ""

# 8. SERVI√áOS E PORTAS
echo "8. üåê SERVI√áOS E PORTAS"
echo "-----------------------"
echo "Portas em uso:"
netstat -tlnp 2>/dev/null | grep LISTEN | head -5 || ss -tlnp | head -5 || echo "  N√£o foi poss√≠vel verificar portas"
echo ""

# 9. LOGS RECENTES
echo "9. üìã LOGS RECENTES"
echo "-------------------"
echo "Arquivos de log encontrados:"
find logs/ -name "*.log" -type f 2>/dev/null | head -3 || echo "  Nenhum log encontrado"
echo ""

# 10. TESTES DISPON√çVEIS
echo "10. üß™ TESTES DISPON√çVEIS"
echo "-------------------------"
echo "Arquivos de teste encontrados: $(find tests/ -name "*.py" -type f 2>/dev/null | wc -l)"
echo "Scripts de valida√ß√£o: $(find scripts/validation/ -name "*.sh" -type f 2>/dev/null | wc -l)"
echo ""

# 11. WORKERS CONFIGURADOS
echo "11. üë• WORKERS CONFIGURADOS"
echo "---------------------------"
if [ -f "cluster.yaml" ]; then
    echo "Arquivo cluster.yaml encontrado"
    worker_count=$(grep -c "worker_" cluster.yaml 2>/dev/null || echo "0")
    echo "Workers configurados: $worker_count"
else
    echo "‚ùå Arquivo cluster.yaml N√ÉO encontrado"
fi
echo ""

# 12. MODELOS OLLAMA
echo "12. ü§ñ MODELOS OLLAMA"
echo "---------------------"
if command -v ollama &> /dev/null; then
    echo "‚úÖ Ollama instalado"
    echo "Modelos dispon√≠veis: $(ollama list 2>/dev/null | wc -l)"
else
    echo "‚ùå Ollama N√ÉO instalado"
fi
echo ""

# 13. DOCKER
echo "13. üê≥ DOCKER"
echo "------------"
if command -v docker &> /dev/null; then
    echo "‚úÖ Docker instalado: $(docker --version)"
    echo "Containers em execu√ß√£o: $(docker ps 2>/dev/null | wc -l)"
else
    echo "‚ùå Docker N√ÉO instalado"
fi
echo ""

# 14. RESUMO EXECUTIVO
echo "14. üìä RESUMO EXECUTIVO"
echo "======================="
echo "‚úÖ Itens funcionando:"
echo "  - Ambiente virtual: $([ -d "cluster-ai-env" ] && echo "OK" || echo "FALTA")"
echo "  - Scripts execut√°veis: $(find scripts/ -name "*.sh" -type f -executable 2>/dev/null | wc -l)"
echo "  - Arquivos Python: $(find . -name "*.py" -type f -not -path "./node_modules/*" -not -path "./cluster-ai-env/*" -not -path "./__pycache__/*" 2>/dev/null | wc -l)"
echo "  - Sintaxe scripts: $([ "$bash_syntax_errors" -eq 0 ] && echo "OK" || echo "ERROS")"
echo "  - Sintaxe Python: $([ "$python_syntax_errors" -eq 0 ] && echo "OK" || echo "ERROS")"
echo ""
echo "‚ö†Ô∏è Itens para verificar:"
echo "  - Depend√™ncias Python espec√≠ficas"
echo "  - Configura√ß√µes de rede"
echo "  - Permiss√µes de arquivos"
echo "  - Configura√ß√£o de workers"
echo ""

echo "üéØ PR√ìXIMOS PASSOS RECOMENDADOS:"
echo "1. Corrigir erros de sintaxe encontrados"
echo "2. Verificar permiss√µes de arquivos"
echo "3. Configurar workers adequadamente"
echo "4. Testar inicializa√ß√£o de servi√ßos"
echo "5. Executar su√≠te de testes completa"
echo ""

echo "üìÖ Relat√≥rio gerado em: $(date)"
echo "üîç Diagn√≥stico conclu√≠do"
