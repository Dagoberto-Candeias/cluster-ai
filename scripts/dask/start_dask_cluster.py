#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script corrigido para iniciar um cluster Dask local com configura√ß√µes de seguran√ßa.
Configurado para usar SSD externo automaticamente.
"""
import argparse
import configparser
import os
import socket
import sys
import time
from pathlib import Path

try:
    from dask.distributed import LocalCluster
    from distributed.security import Security
except ImportError:
    print("ERRO: Dask n√£o est√° instalado. Execute 'pip install dask[complete]'.")
    sys.exit(1)


def is_port_in_use(port: int) -> bool:
    """Verifica se uma porta TCP est√° em uso."""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        try:
            s.bind(("", port))
            return False
        except OSError:
            return True


def find_available_port(start_port: int, max_attempts: int = 100) -> int:
    """Encontra uma porta TCP livre."""
    for i in range(max_attempts):
        port_to_check = start_port + i
        if not is_port_in_use(port_to_check):
            return port_to_check
    raise RuntimeError(
        f"N√£o foi poss√≠vel encontrar uma porta livre ap√≥s {max_attempts} tentativas"
    )


def setup_external_ssd():
    """Configura o uso do SSD externo automaticamente."""
    external_ssd = "/mnt/external_ssd"

    # Verificar se SSD externo est√° montado
    if not os.path.exists(external_ssd):
        print(f"AVISO: SSD externo n√£o encontrado em {external_ssd}")
        return "/tmp/dask-spill"

    # Criar diret√≥rios no SSD externo
    dask_spill_dir = os.path.join(external_ssd, "dask-spill")
    swap_dir = os.path.join(external_ssd, "swap")

    os.makedirs(dask_spill_dir, exist_ok=True)
    os.makedirs(swap_dir, exist_ok=True)

    print(f"‚úÖ SSD externo configurado: {external_ssd}")
    print(f"   Spill directory: {dask_spill_dir}")
    print(f"   Swap directory: {swap_dir}")

    return dask_spill_dir


def main(project_root: str):
    """Inicia o cluster Dask."""
    project_root_path = Path(project_root)
    print("üöÄ Iniciando cluster Dask com SSD externo...")

    # Configurar SSD externo
    spill_directory = setup_external_ssd()

    # Carregar configura√ß√µes do cluster.conf.ini
    config_file = project_root_path / "config" / "cluster.conf"
    config = configparser.ConfigParser()
    if config_file.exists():
        config.read(config_file)

    # Obter configura√ß√µes ou usar valores padr√£o
    dask_section = config["dask"] if "dask" in config else {}
    dashboard_port_config = int(dask_section.get("dashboard_port", "8787"))
    scheduler_port_config = int(dask_section.get("scheduler_port", "8786"))
    n_workers = int(dask_section.get("n_workers", 2))
    threads_per_worker = int(dask_section.get("threads_per_worker", 2))

    # Verifica√ß√£o de Portas
    final_scheduler_port = scheduler_port_config
    if is_port_in_use(final_scheduler_port):
        final_scheduler_port = find_available_port(final_scheduler_port)
        print(f"üì° Scheduler usando porta: {final_scheduler_port}")

    final_dashboard_port = dashboard_port_config
    if is_port_in_use(final_dashboard_port):
        final_dashboard_port = find_available_port(final_dashboard_port)
        print(f"üìä Dashboard usando porta: {final_dashboard_port}")

    # Garantir que scheduler e dashboard usem portas diferentes
    if final_scheduler_port == final_dashboard_port:
        final_dashboard_port = find_available_port(final_dashboard_port + 1)
        print(f"üìä Dashboard ajustado para porta: {final_dashboard_port}")

    # Configurar TLS se certificados estiverem dispon√≠veis
    cert_file = project_root_path / "certs" / "dask_cert.pem"
    key_file = project_root_path / "certs" / "dask_key.pem"

    if cert_file.exists() and key_file.exists():
        print("üîí TLS configurado: Certificados encontrados")
        print("   ‚ö†Ô∏è  TLS temporariamente desabilitado para compatibilidade")
        print("   üìù Para habilitar TLS, consulte a documenta√ß√£o do Dask")
        security = None
    else:
        print("‚ö†Ô∏è  TLS n√£o configurado: Certificados n√£o encontrados")
        print("   Execute: bash scripts/security/generate_certificates.sh")
        security = None

    # Criar cluster
    cluster = LocalCluster(
        n_workers=n_workers,
        threads_per_worker=threads_per_worker,
        dashboard_address=f"{socket.gethostbyname(socket.gethostname())}:{final_dashboard_port}",
        scheduler_port=final_scheduler_port,
        ip=socket.gethostbyname(socket.gethostname()),
        security=security,
        processes=False,
        memory_limit="4GB",  # Limite de mem√≥ria por worker
        local_directory=spill_directory,
    )

    print("\n‚úÖ Cluster Dask iniciado com sucesso!")
    print(f"   üìä Dashboard: http://localhost:{final_dashboard_port}/status")
    print(f"   üéØ Scheduler: {cluster.scheduler_address}")
    print(f"   üë∑ Workers: {n_workers} (threads: {threads_per_worker})")
    print(f"   üíæ Spill dir: {spill_directory}")
    print("\n   Pressione Ctrl+C para parar.")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë Encerrando Dask...")
        cluster.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Inicia cluster Dask com SSD externo")
    parser.add_argument(
        "project_root", type=str, help="Caminho raiz do projeto cluster-ai"
    )
    args = parser.parse_args()
    main(str(Path(args.project_root).resolve()))
