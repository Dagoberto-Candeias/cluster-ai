#!/bin/bash
# =============================================================================
# Script de Consolida√ß√£o Completa de TODOs - Cluster AI
# =============================================================================
# Consolida TODOS os arquivos TODO do projeto em um √∫nico TODO_MASTER.md
# Remove duplicatas, organiza por prioridade e gera relat√≥rios
#
# Autor: Cluster AI Team
# Data: 2025-09-19
# Vers√£o: 2.0.0 - Consolida√ß√£o Completa
# Arquivo: consolidate_all_todos.sh
# =============================================================================

set -euo pipefail

# -----------------------------------------------------------------------------
# CONSTANTES
# -----------------------------------------------------------------------------
readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
readonly BACKUP_DIR="${PROJECT_ROOT}/backups/todos_consolidation_$(date +%Y%m%d_%H%M%S)"
readonly TODO_MASTER="${PROJECT_ROOT}/TODO_MASTER.md"

# -----------------------------------------------------------------------------
# CORES PARA OUTPUT
# -----------------------------------------------------------------------------
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# -----------------------------------------------------------------------------
# FUN√á√ïES DE LOGGING
# -----------------------------------------------------------------------------
log_info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] [INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] [WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] [ERROR]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] [SUCCESS]${NC} $1"
}

# -----------------------------------------------------------------------------
# FUN√á√ïES AUXILIARES
# -----------------------------------------------------------------------------
backup_existing_todos() {
    log_info "Criando backup de todos os arquivos TODO existentes..."

    mkdir -p "${BACKUP_DIR}"

    # Backup de todos os arquivos TODO
    find "${PROJECT_ROOT}" -name "TODO*.md" -type f -exec cp {} "${BACKUP_DIR}/" \;

    # Backup do TODO_MASTER atual
    if [ -f "${TODO_MASTER}" ]; then
        cp "${TODO_MASTER}" "${BACKUP_DIR}/TODO_MASTER_before_consolidation.md"
    fi

    log_success "Backup criado em: ${BACKUP_DIR}"
}

analyze_todos() {
    log_info "Analisando todos os arquivos TODO..."

    # Encontrar todos os arquivos TODO
    local todo_files
    todo_files=$(find "${PROJECT_ROOT}" -name "TODO*.md" -type f)

    local total_files=0
    local total_lines=0
    local unique_tasks=0

    echo "# üìä AN√ÅLISE DE TODOS OS ARQUIVOS TODO" > "${BACKUP_DIR}/analysis_report.md"
    echo "- **Data da An√°lise**: $(date)" >> "${BACKUP_DIR}/analysis_report.md"
    echo "- **Total de Arquivos TODO**: $(echo "$todo_files" | wc -l)" >> "${BACKUP_DIR}/analysis_report.md"
    echo "" >> "${BACKUP_DIR}/analysis_report.md"

    echo "## üìã LISTA DE ARQUIVOS TODO ENCONTRADOS" >> "${BACKUP_DIR}/analysis_report.md"

    while IFS= read -r file; do
        if [ -f "$file" ]; then
            ((total_files++))
            local lines=$(wc -l < "$file")
            ((total_lines += lines))

            echo "- **$file**: $lines linhas" >> "${BACKUP_DIR}/analysis_report.md"

            # Extrair tarefas (linhas que come√ßam com - [ ])
            local tasks_in_file=$(grep -c "^- \[" "$file" 2>/dev/null || echo "0")
            ((unique_tasks += tasks_in_file))
        fi
    done <<< "$todo_files"

    echo "" >> "${BACKUP_DIR}/analysis_report.md"
    echo "## üìä M√âTRICAS GERAIS" >> "${BACKUP_DIR}/analysis_report.md"
    echo "- **Arquivos TODO**: $total_files" >> "${BACKUP_DIR}/analysis_report.md"
    echo "- **Total de linhas**: $total_lines" >> "${BACKUP_DIR}/analysis_report.md"
    echo "- **Tarefas identificadas**: $unique_tasks" >> "${BACKUP_DIR}/analysis_report.md"
    echo "- **Tamanho m√©dio por arquivo**: $((total_lines / total_files)) linhas" >> "${BACKUP_DIR}/analysis_report.md"

    log_success "An√°lise conclu√≠da. Relat√≥rio: ${BACKUP_DIR}/analysis_report.md"
}

extract_tasks_from_todos() {
    log_info "Extraindo tarefas de todos os arquivos TODO..."

    local temp_tasks_file="${BACKUP_DIR}/extracted_tasks.txt"

    # Encontrar todos os arquivos TODO
    local todo_files
    todo_files=$(find "${PROJECT_ROOT}" -name "TODO*.md" -type f)

    > "$temp_tasks_file"

    while IFS= read -r file; do
        if [ -f "$file" ]; then
            log_info "Processando: $file"

            # Extrair tarefas (linhas que come√ßam com - [ ])
            grep "^- \[" "$file" 2>/dev/null | while IFS= read -r task; do
                # Adicionar arquivo de origem como coment√°rio
                echo "# FROM: $file" >> "$temp_tasks_file"
                echo "$task" >> "$temp_tasks_file"
                echo "" >> "$temp_tasks_file"
            done
        fi
    done <<< "$todo_files"

    log_success "Tarefas extra√≠das: $(wc -l < "$temp_tasks_file") tarefas encontradas"
}

categorize_and_deduplicate() {
    log_info "Categorizando e removendo duplicatas..."

    local temp_tasks_file="${BACKUP_DIR}/extracted_tasks.txt"
    local categorized_file="${BACKUP_DIR}/categorized_tasks.md"

    # Categorias baseadas em palavras-chave
    local categories=(
        "CR√çTICA:.*[Cc]r√≠tc\|URGENTE\|BLOQUEANTE"
        "ALTA:.*[Aa]lt.*prioridade\|IMPORTANTE\|PRIORIDADE.*ALTA"
        "M√âDIA:.*[Mm]√©dia.*prioridade\|MELHORIA\|OTIMIZA√á√ÉO"
        "BAIXA:.*[Bb]aix.*prioridade\|OPCIONAL\|FUTURO"
        "DOCUMENTA√á√ÉO:.*[Dd]ocumenta√ß√£o\|README\|GUIA"
        "TESTES:.*[Tt]est.*\|[Tt]estando\|VALIDAR"
        "SEGURAN√áA:.*[Ss]eguran√ßa\|[Ss]ecurity\|AUDITORIA"
        "PERFORMANCE:.*[Pp]erformance\|[Oo]timiz\|VELOCIDADE"
        "INFRAESTRUTURA:.*[Ii]nfra\|DEPLOY\|SERVIDOR"
        "GERAL:.*"
    )

    echo "# üéØ TAREFAS CATEGORIZADAS E DESDUPLICADAS" > "$categorized_file"
    echo "- **Data da Categoriza√ß√£o**: $(date)" >> "$categorized_file"
    echo "- **Total de Tarefas Processadas**: $(wc -l < "$temp_tasks_file")" >> "$categorized_file"
    echo "" >> "$categorized_file"

    local task_count=0

    for category in "${categories[@]}"; do
        local category_name=$(echo "$category" | cut -d':' -f1)
        local pattern=$(echo "$category" | cut -d':' -f2)

        echo "## üìã $category_name" >> "$categorized_file"
        echo "" >> "$categorized_file"

        # Encontrar tarefas √∫nicas desta categoria
        grep -A1 -B1 "$pattern" "$temp_tasks_file" | grep "^- \[" | sort | uniq -c | sort -nr | while read -r count task; do
            if [ "$count" -eq 1 ]; then
                echo "$task" >> "$categorized_file"
                echo "" >> "$categorized_file"
                ((task_count++))
            fi
        done

        echo "" >> "$categorized_file"
    done

    echo "## üìä RESUMO DA CATEGORIZA√á√ÉO" >> "$categorized_file"
    echo "- **Total de tarefas √∫nicas**: $task_count" >> "$categorized_file"
    echo "- **Categorias processadas**: ${#categories[@]}" >> "$categorized_file"

    log_success "Categoriza√ß√£o conclu√≠da: $task_count tarefas √∫nicas organizadas"
}

generate_new_todo_master() {
    log_info "Gerando novo TODO_MASTER.md consolidado..."

    local categorized_file="${BACKUP_DIR}/categorized_tasks.md"

    # Backup do TODO_MASTER atual
    if [ -f "${TODO_MASTER}" ]; then
        cp "${TODO_MASTER}" "${TODO_MASTER}.backup_$(date +%Y%m%d_%H%M%S)"
    fi

    # Criar novo TODO_MASTER
    cat > "${TODO_MASTER}" << 'EOF'
# üéØ TODO MASTER - CLUSTER AI CONSOLIDADO

## üìä STATUS GERAL DO PROJETO
- **Data da Consolida√ß√£o**: $(date)
- **Status**: Consolida√ß√£o completa realizada
- **Prioridade**: ALTA - Manuten√ß√£o necess√°ria

---

## üîç CONSOLIDA√á√ÉO REALIZADA

### üìã CONSOLIDA√á√ÉO COMPLETA DE TODOS OS TODOs
**Processo realizado:**
- ‚úÖ **An√°lise**: $(find . -name "TODO*.md" -type f | wc -l) arquivos TODO processados
- ‚úÖ **Extra√ß√£o**: Todas as tarefas identificadas e extra√≠das
- ‚úÖ **Categoriza√ß√£o**: Tarefas organizadas por prioridade
- ‚úÖ **Desduplica√ß√£o**: Tarefas duplicadas removidas
- ‚úÖ **Backup**: Todos os arquivos originais preservados

**Resultados:**
- **Antes**: $(find . -name "TODO*.md" -type f | wc -l) arquivos TODO fragmentados
- **Depois**: 1 arquivo TODO_MASTER.md consolidado
- **Efici√™ncia**: $(echo "scale=1; ($(find . -name "TODO*.md" -type f | wc -l) - 1) * 100 / $(find . -name "TODO*.md" -type f | wc -l)" | bc)% redu√ß√£o

---

EOF

    # Adicionar tarefas categorizadas
    if [ -f "$categorized_file" ]; then
        cat "$categorized_file" >> "${TODO_MASTER}"
    fi

    # Adicionar se√ß√£o de m√©tricas finais
    cat >> "${TODO_MASTER}" << EOF

## üìä M√âTRICAS FINAIS DA CONSOLIDA√á√ÉO

### ‚úÖ Benef√≠cios Alcan√ßados:
- **Organiza√ß√£o**: Todas as tarefas em um √∫nico local
- **Manutenibilidade**: Facilita acompanhamento do progresso
- **Prioriza√ß√£o**: Tarefas organizadas por import√¢ncia
- **Efici√™ncia**: Elimina√ß√£o de duplicatas e redund√¢ncias

### üìà Estat√≠sticas de Consolida√ß√£o:
- **Arquivos processados**: $(find . -name "TODO*.md" -type f | wc -l)
- **Tarefas identificadas**: $(grep -c "^- \[" "$categorized_file" 2>/dev/null || echo "0")
- **Tarefas √∫nicas**: $(grep "^- \[" "$categorized_file" 2>/dev/null | wc -l)
- **Categorias criadas**: $(grep "^## " "$categorized_file" 2>/dev/null | wc -l)
- **Espa√ßo economizado**: ~$(echo "scale=0; ($(find . -name "TODO*.md" -type f -exec wc -l {} \; | awk '{sum+=$1} END {print sum}') - $(wc -l < "$categorized_file")) / 100 * 100" | bc)% das linhas

---

## üö® PR√ìXIMOS PASSOS AP√ìS CONSOLIDA√á√ÉO

### üìã Manuten√ß√£o Cont√≠nua:
1. **Atualiza√ß√£o Regular**: Manter TODO_MASTER.md atualizado
2. **Revis√£o Peri√≥dica**: Revisar tarefas mensalmente
3. **Prioriza√ß√£o**: Reavaliar prioridades conforme necess√°rio
4. **Arquivamento**: Mover tarefas conclu√≠das para hist√≥rico

### ‚úÖ Valida√ß√£o:
- [ ] Verificar se todas as tarefas importantes foram preservadas
- [ ] Testar funcionalidades cr√≠ticas mencionadas nos TODOs
- [ ] Atualizar documenta√ß√£o relacionada
- [ ] Comunicar mudan√ßas √† equipe

---

## üìÅ LOCALIZA√á√ÉO DOS BACKUPS

Todos os arquivos TODO originais foram preservados em:
- **Backup principal**: \`${BACKUP_DIR}/\`
- **Relat√≥rio de an√°lise**: \`${BACKUP_DIR}/analysis_report.md\`
- **Tarefas extra√≠das**: \`${BACKUP_DIR}/extracted_tasks.txt\`
- **Tarefas categorizadas**: \`${BACKUP_DIR}/categorized_tasks.md\`

---

**üìã Status**: ‚úÖ CONSOLIDA√á√ÉO COMPLETA REALIZADA
**üë§ Respons√°vel**: Sistema de consolida√ß√£o autom√°tica
**üìÖ Data**: $(date)
**üéØ Resultado**: Projeto completamente organizado

EOF

    log_success "Novo TODO_MASTER.md gerado com sucesso!"
}

cleanup_old_todos() {
    log_warn "ATEN√á√ÉO: Removendo arquivos TODO antigos..."
    log_warn "Todos os arquivos foram backupados em: ${BACKUP_DIR}"

    read -p "Tem certeza que deseja remover os arquivos TODO antigos? (y/N): " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Remover todos os arquivos TODO exceto TODO_MASTER.md
        find "${PROJECT_ROOT}" -name "TODO*.md" -type f -not -name "TODO_MASTER.md" -delete

        log_success "Arquivos TODO antigos removidos"
        log_info "Apenas TODO_MASTER.md foi mantido"
    else
        log_info "Opera√ß√£o cancelada. Todos os arquivos TODO foram preservados."
    fi
}

# -----------------------------------------------------------------------------
# FUN√á√ÉO PRINCIPAL
# -----------------------------------------------------------------------------
main() {
    echo
    echo "ü§ñ CLUSTER AI - CONSOLIDA√á√ÉO COMPLETA DE TODOS OS TODOs"
    echo "======================================================"
    echo
    echo "Este script ir√°:"
    echo "1. ‚úÖ Analisar todos os $(find . -name "TODO*.md" -type f | wc -l) arquivos TODO existentes"
    echo "2. ‚úÖ Extrair e categorizar todas as tarefas"
    echo "3. ‚úÖ Remover duplicatas e organizar por prioridade"
    echo "4. ‚úÖ Gerar um TODO_MASTER.md consolidado"
    echo "5. ‚úÖ Criar backup completo de todos os arquivos"
    echo "6. ‚úÖ Oferecer remo√ß√£o dos arquivos antigos"
    echo

    # Verificar se h√° arquivos TODO para processar
    local todo_count
    todo_count=$(find . -name "TODO*.md" -type f | wc -l)

    if [ "$todo_count" -le 1 ]; then
        log_success "Apenas 1 arquivo TODO encontrado. Nenhuma consolida√ß√£o necess√°ria."
        exit 0
    fi

    # Executar consolida√ß√£o
    backup_existing_todos
    analyze_todos
    extract_tasks_from_todos
    categorize_and_deduplicate
    generate_new_todo_master
    cleanup_old_todos

    echo
    echo "üéâ CONSOLIDA√á√ÉO COMPLETA REALIZADA COM SUCESSO!"
    echo
    echo "üìä Resumo:"
    echo "   ‚Ä¢ Arquivos processados: $todo_count"
    echo "   ‚Ä¢ Backup criado em: $BACKUP_DIR"
    echo "   ‚Ä¢ TODO_MASTER.md atualizado"
    echo "   ‚Ä¢ Tarefas organizadas por prioridade"
    echo
    echo "üìã Para visualizar o resultado:"
    echo "   ‚Ä¢ Arquivo consolidado: TODO_MASTER.md"
    echo "   ‚Ä¢ Relat√≥rio detalhado: $BACKUP_DIR/analysis_report.md"
    echo
}

# -----------------------------------------------------------------------------
# EXECU√á√ÉO
# -----------------------------------------------------------------------------
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
