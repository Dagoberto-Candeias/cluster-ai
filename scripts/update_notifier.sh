#!/bin/bash
# =============================================================================
# Sistema de Notifica√ß√£o de Atualiza√ß√µes - Cluster AI
# =============================================================================
# Apresenta atualiza√ß√µes dispon√≠veis e permite ao usu√°rio aprovar/rejeitar
#
# Autor: Cluster AI Team
# Data: 2025-01-20
# Vers√£o: 1.0.0
# Arquivo: update_notifier.sh
# =============================================================================

set -euo pipefail

# --- Configura√ß√£o Inicial ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Carregar fun√ß√µes comuns
if [ ! -f "${SCRIPT_DIR}/lib/common.sh" ]; then
    echo "ERRO CR√çTICO: Script de fun√ß√µes comuns n√£o encontrado."
    exit 1
fi
source "${SCRIPT_DIR}/lib/common.sh"

# Carregar configura√ß√£o
UPDATE_CONFIG="${PROJECT_ROOT}/config/update.conf"
if [ ! -f "$UPDATE_CONFIG" ]; then
    error "Arquivo de configura√ß√£o n√£o encontrado: $UPDATE_CONFIG"
    exit 1
fi

# --- Constantes ---
LOG_DIR="${PROJECT_ROOT}/logs"
STATUS_FILE="${LOG_DIR}/update_status.json"
NOTIFICATION_LOG="${LOG_DIR}/update_notifications.log"

# Criar diret√≥rios necess√°rios
mkdir -p "$LOG_DIR"

# --- Cores para interface ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# --- Fun√ß√µes ---

# Fun√ß√£o para log detalhado
log_notification() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    echo "[$timestamp] [$level] $message" >> "$NOTIFICATION_LOG"

    case "$level" in
        "INFO")
            info "$message" ;;
        "WARN")
            warn "$message" ;;
        "ERROR")
            error "$message" ;;
    esac
}

# Fun√ß√£o para obter configura√ß√£o
get_update_config() {
    get_config_value "$1" "$2" "$UPDATE_CONFIG" "$3"
}

# Fun√ß√£o para mostrar cabe√ßalho
show_header() {
    clear
    echo -e "${BOLD}${CYAN}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    echo -e "${BOLD}${CYAN}‚îÇ              üöÄ SISTEMA DE AUTO ATUALIZA√á√ÉO                ‚îÇ${NC}"
    echo -e "${BOLD}${CYAN}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
    echo
}

# Fun√ß√£o para verificar se h√° atualiza√ß√µes
check_for_updates() {
    if [[ ! -f "$STATUS_FILE" ]]; then
        log_notification "WARN" "Arquivo de status n√£o encontrado"
        return 1
    fi

    local has_updates
    has_updates=$(jq -r '.updates_available' "$STATUS_FILE" 2>/dev/null || echo "false")

    if [[ "$has_updates" != "true" ]]; then
        log_notification "INFO" "Nenhuma atualiza√ß√£o dispon√≠vel"
        return 1
    fi

    return 0
}

# Fun√ß√£o para mostrar atualiza√ß√µes dispon√≠veis
show_updates() {
    show_header

    echo -e "${BOLD}${BLUE}üìã ATUALIZA√á√ïES DISPON√çVEIS${NC}"
    echo

    local timestamp
    timestamp=$(jq -r '.timestamp' "$STATUS_FILE" 2>/dev/null || echo "Desconhecido")

    echo -e "${GRAY}√öltima verifica√ß√£o: $timestamp${NC}"
    echo

    # Mostrar componentes com atualiza√ß√µes
    jq -r '.components[] | "  \(.type): \(.description) - \(if .commits_ahead then "Commits: \(.commits_ahead)" elif .packages then "Pacotes: \(.packages)" elif .container then "Container: \(.container)" elif .name then "Modelo: \(.name)" else "Atualiza√ß√£o dispon√≠vel" end)"' "$STATUS_FILE" 2>/dev/null || echo "  Erro ao ler informa√ß√µes de atualiza√ß√£o"

    echo
}

# Fun√ß√£o para mostrar detalhes de um componente
show_component_details() {
    local component_type="$1"

    echo -e "${BOLD}${YELLOW}Detalhes do componente: $component_type${NC}"
    echo

    case "$component_type" in
        "git")
            echo -e "${CYAN}Tipo:${NC} Atualiza√ß√£o do reposit√≥rio Git"
            echo -e "${CYAN}Descri√ß√£o:${NC} Novas funcionalidades, corre√ß√µes de bugs e melhorias de seguran√ßa"
            echo -e "${CYAN}Impacto:${NC} Pode incluir mudan√ßas significativas no c√≥digo"
            echo -e "${CYAN}Tempo estimado:${NC} 2-5 minutos"
            echo -e "${CYAN}Requer restart:${NC} Sim (servi√ßos podem ser reiniciados)"
            ;;
        "docker")
            echo -e "${CYAN}Tipo:${NC} Atualiza√ß√£o de container Docker"
            echo -e "${CYAN}Descri√ß√£o:${NC} Nova vers√£o da imagem do container"
            echo -e "${CYAN}Impacto:${NC} Containers ser√£o recriados com a nova imagem"
            echo -e "${CYAN}Tempo estimado:${NC} 5-10 minutos"
            echo -e "${CYAN}Requer restart:${NC} Sim (containers ser√£o reiniciados)"
            ;;
        "system")
            echo -e "${CYAN}Tipo:${NC} Atualiza√ß√£o do sistema operacional"
            echo -e "${CYAN}Descri√ß√£o:${NC} Pacotes do sistema, corre√ß√µes de seguran√ßa"
            echo -e "${CYAN}Impacto:${NC} Requer restart do sistema em alguns casos"
            echo -e "${CYAN}Tempo estimado:${NC} 10-30 minutos"
            echo -e "${CYAN}Requer restart:${NC} Poss√≠vel (depende dos pacotes)"
            ;;
        "model")
            echo -e "${CYAN}Tipo:${NC} Atualiza√ß√£o de modelo de IA"
            echo -e "${CYAN}Descri√ß√£o:${NC} Nova vers√£o do modelo com melhorias"
            echo -e "${CYAN}Impacto:${NC} Modelo ser√° baixado novamente"
            echo -e "${CYAN}Tempo estimado:${NC} 5-15 minutos"
            echo -e "${CYAN}Requer restart:${NC} N√£o"
            ;;
    esac

    echo
}

# Fun√ß√£o para obter pol√≠tica de atualiza√ß√£o
get_update_policy() {
    local component_type="$1"

    case "$component_type" in
        "git")
            get_update_config "REPOSITORY" "GIT_UPDATE_POLICY" "ask" ;;
        "docker")
            get_update_config "DOCKER" "DOCKER_UPDATE_POLICY" "ask" ;;
        "system")
            get_update_config "SYSTEM" "SYSTEM_UPDATE_POLICY" "ask" ;;
        "model")
            get_update_config "MODELS" "MODELS_UPDATE_POLICY" "ask" ;;
        *)
            echo "ask" ;;
    esac
}

# Fun√ß√£o para perguntar sobre atualiza√ß√£o
ask_for_update() {
    local component_type="$1"
    local component_name="$2"

    local policy
    policy=$(get_update_policy "$component_type")

    case "$policy" in
        "auto")
            echo -e "${GREEN}‚úì${NC} ${BOLD}Atualiza√ß√£o autom√°tica habilitada${NC}"
            return 0 ;;
        "never")
            echo -e "${YELLOW}‚ö†${NC} ${BOLD}Atualiza√ß√£o desabilitada por pol√≠tica${NC}"
            return 1 ;;
        "ask"|*)
            echo -e "${YELLOW}Deseja atualizar ${BOLD}$component_name${NC}?${NC}"
            echo -e "  ${CYAN}1${NC} - Sim, atualizar agora"
            echo -e "  ${CYAN}2${NC} - N√£o, pular esta atualiza√ß√£o"
            echo -e "  ${CYAN}3${NC} - Lembrar mais tarde"
            echo -e "  ${CYAN}4${NC} - Ver detalhes"
            echo

            local choice
            read -p "Escolha uma op√ß√£o (1-4): " choice

            case "$choice" in
                "1")
                    return 0 ;;
                "2")
                    return 1 ;;
                "3")
                    echo -e "${YELLOW}‚è∞${NC} Lembrete: execute novamente quando quiser atualizar"
                    return 1 ;;
                "4")
                    show_component_details "$component_type"
                    ask_for_update "$component_type" "$component_name" ;;
                *)
                    echo -e "${RED}‚úó${NC} Op√ß√£o inv√°lida"
                    ask_for_update "$component_type" "$component_name" ;;
            esac
            ;;
    esac
}

# Fun√ß√£o para processar atualiza√ß√µes
process_updates() {
    show_header

    if ! check_for_updates; then
        echo -e "${GREEN}‚úì${NC} ${BOLD}Sistema j√° est√° atualizado!${NC}"
        echo
        echo -e "${GRAY}Pressione Enter para continuar...${NC}"
        read
        return 0
    fi

    show_updates

    # Obter lista de componentes
    local components
    components=$(jq -r '.components[].type' "$STATUS_FILE" 2>/dev/null || echo "")

    if [[ -z "$components" ]]; then
        error "Erro ao obter lista de componentes"
        return 1
    fi

    local updates_to_apply=()
    local updates_skipped=()

    # Processar cada componente
    while IFS=':' read -r component_type component_value; do
        [[ -z "$component_type" ]] && continue

        local component_name="$component_value"
        if [[ "$component_type" == "git" ]]; then
            component_name="Reposit√≥rio Git"
        elif [[ "$component_type" == "system" ]]; then
            component_name="Sistema Operacional"
        elif [[ "$component_type" == "model" ]]; then
            component_name="Modelo: $component_value"
        fi

        echo -e "${BOLD}${PURPLE}Processando: $component_name${NC}"
        echo

        if ask_for_update "$component_type" "$component_name"; then
            updates_to_apply+=("$component_type:$component_value")
            echo -e "${GREEN}‚úì${NC} Marcado para atualiza√ß√£o"
        else
            updates_skipped+=("$component_type:$component_value")
            echo -e "${YELLOW}‚ö†${NC} Pulado"
        fi

        echo
    done <<< "$components"

    # Mostrar resumo
    echo -e "${BOLD}${BLUE}RESUMO${NC}"
    echo

    if [[ ${#updates_to_apply[@]} -gt 0 ]]; then
        echo -e "${GREEN}‚úì${NC} ${BOLD}Atualiza√ß√µes a aplicar:${NC}"
        for update in "${updates_to_apply[@]}"; do
            IFS=':' read -r comp_type comp_value <<< "$update"
            echo -e "  - $comp_type: $comp_value"
        done
        echo
    fi

    if [[ ${#updates_skipped[@]} -gt 0 ]]; then
        echo -e "${YELLOW}‚ö†${NC} ${BOLD}Atualiza√ß√µes puladas:${NC}"
        for update in "${updates_skipped[@]}"; do
            IFS=':' read -r comp_type comp_value <<< "$update"
            echo -e "  - $comp_type: $comp_value"
        done
        echo
    fi

    # Confirmar aplica√ß√£o
    if [[ ${#updates_to_apply[@]} -gt 0 ]]; then
        if confirm_operation "Deseja aplicar as atualiza√ß√µes selecionadas?"; then
            echo -e "${GREEN}üöÄ${NC} ${BOLD}Aplicando atualiza√ß√µes...${NC}"
            log_notification "INFO" "Iniciando aplica√ß√£o de atualiza√ß√µes"

            # Chamar script de atualiza√ß√£o
            if bash "${SCRIPT_DIR}/maintenance/auto_updater.sh" "${updates_to_apply[@]}"; then
                success "Atualiza√ß√µes aplicadas com sucesso!"
                log_notification "INFO" "Atualiza√ß√µes aplicadas com sucesso"
            else
                error "Falha ao aplicar atualiza√ß√µes"
                log_notification "ERROR" "Falha ao aplicar atualiza√ß√µes"
                return 1
            fi
        else
            warn "Aplica√ß√£o de atualiza√ß√µes cancelada pelo usu√°rio"
            log_notification "INFO" "Aplica√ß√£o de atualiza√ß√µes cancelada pelo usu√°rio"
        fi
    else
        info "Nenhuma atualiza√ß√£o selecionada para aplica√ß√£o"
        log_notification "INFO" "Nenhuma atualiza√ß√£o selecionada"
    fi

    echo
    echo -e "${GRAY}Pressione Enter para continuar...${NC}"
    read
}

# Fun√ß√£o para modo silencioso (para scripts)
silent_mode() {
    if ! check_for_updates; then
        echo "NO_UPDATES"
        return 0
    fi

    local components
    components=$(jq -r '.components[].type' "$STATUS_FILE" 2>/dev/null || echo "")

    if [[ -z "$components" ]]; then
        echo "ERROR"
        return 1
    fi

    echo "UPDATES_AVAILABLE"
    jq -c '.components[]' "$STATUS_FILE" 2>/dev/null || echo "ERROR"
}

# Fun√ß√£o principal
main() {
    # Verificar argumentos
    if [[ $# -gt 0 ]]; then
        case "$1" in
            "--silent"|"-s")
                silent_mode
                return ;;
            "--check"|"-c")
                check_for_updates
                return ;;
            *)
                echo "Uso: $0 [--silent|--check]"
                exit 1 ;;
        esac
    fi

    # Modo interativo
    process_updates
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
