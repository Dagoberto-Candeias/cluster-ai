apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-ai-tensorflow-serving
  namespace: cluster-ai
  labels:
    app.kubernetes.io/name: tensorflow-serving
    app.kubernetes.io/component: ml-serving
    app.kubernetes.io/part-of: cluster-ai
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: tensorflow-serving
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tensorflow-serving
        app.kubernetes.io/component: ml-serving
    spec:
      containers:
      - name: tensorflow-serving
        image: tensorflow/serving:2.13.0-gpu
        ports:
        - containerPort: 8501
          name: rest-api
        - containerPort: 8500
          name: grpc-api
        env:
        - name: MODEL_NAME
          value: "cluster_ai_model"
        - name: MODEL_BASE_PATH
          value: "/models"
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
            nvidia.com/gpu: 1
          limits:
            cpu: 2000m
            memory: 4Gi
            nvidia.com/gpu: 1
        volumeMounts:
        - name: model-storage
          mountPath: /models
        livenessProbe:
          httpGet:
            path: "/v1/models/cluster_ai_model"
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: "/v1/models/cluster_ai_model"
            port: 8501
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: cluster-ai-models-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: cluster-ai-tensorflow-serving
  namespace: cluster-ai
  labels:
    app.kubernetes.io/name: tensorflow-serving
    app.kubernetes.io/component: ml-serving
    app.kubernetes.io/part-of: cluster-ai
spec:
  ports:
  - name: rest-api
    port: 8501
    targetPort: 8501
  - name: grpc-api
    port: 8500
    targetPort: 8500
  selector:
    app.kubernetes.io/name: tensorflow-serving
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cluster-ai-models-pvc
  namespace: cluster-ai
  labels:
    app.kubernetes.io/name: models-storage
    app.kubernetes.io/component: ml-serving
    app.kubernetes.io/part-of: cluster-ai
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cluster-ai-tensorflow-serving-ingress
  namespace: cluster-ai
  labels:
    app.kubernetes.io/name: tensorflow-serving
    app.kubernetes.io/component: ml-serving
    app.kubernetes.io/part-of: cluster-ai
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - ml.cluster-ai.example.com
    secretName: cluster-ai-tensorflow-serving-tls
  rules:
  - host: ml.cluster-ai.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cluster-ai-tensorflow-serving
            port:
              number: 8501
