apiVersion: batch/v1
kind: CronJob
metadata:
  name: cluster-ai-postgres-backup
  namespace: cluster-ai
  labels:
    app.kubernetes.io/name: postgres-backup
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: cluster-ai
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 3600  # 1 hour timeout
      template:
        metadata:
          labels:
            app.kubernetes.io/name: postgres-backup
            app.kubernetes.io/component: backup
        spec:
          serviceAccountName: cluster-ai-backup-sa
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup
            image: bitnami/postgresql:15
            command:
            - /bin/bash
            - -c
            - |
              # Install required tools
              apt-get update && apt-get install -y curl

              # Download backup script
              curl -o /tmp/postgres-backup.sh https://raw.githubusercontent.com/your-org/cluster-ai/main/backup/scripts/postgres-backup.sh
              chmod +x /tmp/postgres-backup.sh

              # Run backup
              /tmp/postgres-backup.sh
            env:
            - name: BACKUP_DIR
              value: "/backup"
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
              readOnly: true
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: cluster-ai-backup-pvc
          - name: postgres-data
            persistentVolumeClaim:
              claimName: cluster-ai-postgres-pvc
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            fsGroup: 1001
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cluster-ai-backup-pvc
  namespace: cluster-ai
  labels:
    app.kubernetes.io/name: backup-storage
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: cluster-ai
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: standard  # Adjust based on your storage class
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-ai-backup-sa
  namespace: cluster-ai
  labels:
    app.kubernetes.io/name: backup-service-account
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: cluster-ai
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cluster-ai-backup-role
  namespace: cluster-ai
  labels:
    app.kubernetes.io/name: backup-role
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: cluster-ai
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec"]
  verbs: ["get", "list", "create", "delete", "patch", "update", "watch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cluster-ai-backup-rolebinding
  namespace: cluster-ai
  labels:
    app.kubernetes.io/name: backup-rolebinding
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: cluster-ai
subjects:
- kind: ServiceAccount
  name: cluster-ai-backup-sa
  namespace: cluster-ai
roleRef:
  kind: Role
  name: cluster-ai-backup-role
  apiGroup: rbac.authorization.k8s.io
