# Default values for cluster-ai.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Namespace configuration
namespace:
  create: true
  name: cluster-ai

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application images
image:
  registry: docker.io
  repository: cluster-ai
  tag: "latest"
  pullPolicy: IfNotPresent

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2
  image:
    repository: cluster-ai-frontend
    tag: "latest"
  service:
    type: ClusterIP
    port: 80
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# Backend configuration
backend:
  enabled: true
  replicaCount: 3
  image:
    repository: cluster-ai-backend
    tag: "latest"
  service:
    type: ClusterIP
    port: 8000
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  env:
    environment: production
    secretKey: ""
    jwtSecretKey: ""

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: ""
    username: cluster_ai
    password: ""
    database: cluster_ai
  architecture: standalone
  primary:
    persistence:
      enabled: true
      size: 50Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi

# Redis configuration
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi

# Prometheus configuration
prometheus:
  enabled: true
  server:
    persistentVolume:
      enabled: true
      size: 20Gi
    retention: "30d"
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi

# Grafana configuration
grafana:
  enabled: true
  adminPassword: "admin"
  persistence:
    enabled: true
    size: 5Gi
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

# Elasticsearch configuration
elasticsearch:
  enabled: true
  replicas: 1
  persistence:
    enabled: true
    size: 50Gi
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: cluster-ai.example.com
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: cluster-ai-frontend
              port:
                number: 80
    - host: api.cluster-ai.example.com
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: cluster-ai-backend
              port:
                number: 8000
  tls:
    - secretName: cluster-ai-tls
      hosts:
        - cluster-ai.example.com
        - api.cluster-ai.example.com

# Network policies
networkPolicy:
  enabled: true

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  fsGroup: 65534

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}
